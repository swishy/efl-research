#summary Current state and issues of the Enlightenment Foundation Libraries

= Ecore =

_Ecore_ currently has several *subsystems*, from basic data types (lists, double lists, ...) to specific purpose like _Ecore DirectFB_. As more subsystems get in the main _Ecore_, even if the different subsystems are well split (as they are now), the functionality of this library is far from its initial purpose and most of the subsystems can be another library.

== Ecore Plugin ==
_Ecore Plugin_ has several functions that load modules of compiled code into memory, i.e dynamically loading of application's plugins. It is written in a very generic way, but ironically almost all applications that use _Ecore_ as their main loop handler (or just data library) and have some kind of _module_ concept, *don't use _Ecore Plugin_ for this task but their own implementation*, namely:

(Ecore based applications/libraries)

  * Ewl
  * Etk
  * Etk Server
  * Entropy

(Not Ecore based applications/libraries)

  * Evas
  * Esmart Container
  * Imlib2

Doing a simple search for some libraries or applications that use _Ecore Plugin_ shows that  *there isn't any development that use it*.

== Ecore Data ==

= Evas =
Most of the ideas exposed here come from a couple of threads on the enlightenment-devel mailing list at [http://sourceforge.net/mailarchive/message.php?msg_id=36565630] and [http://sourceforge.net/mailarchive/message.php?msg_id=37463742]

== Headers ==
Split huge headers ({{{Evas.h evas_common.h, etc}}}) into smaller ones.

== Data ==
Evas has a very good support for data types (Lists, Hashes, Stringshare and Object Lists) and honestly Evas has a very good performance and a well defined API, most of the E-developers agree on that. But is a problem that to use this data types on your application/library you have to link against Evas even if your development has nothing to do with Evas main purpose: graphics.

== Objects ==
Objects should be made loadable modules
New Object Types:
Filters
Proxies

We should make the polygons a first class citizen, so that they could be used more easily. This means cleaning up what they mean and make move/resize work on them.

We should define and give the possibility for smart object to use the render_pre and render_post if possible (during render_pre you are not allowed to move/resize/show/hide other object, so I don't know if it would be really usefull).

== Engines ==
All engines should currently be developped inside Evas. Most of their code are just a copy/paste and a nightmare to maintain. Engine could be divided in two categorie:

   * the one than upload the pixels to the underlying system (OpenGL, Xrender, maybe Direct3D)
   * the one that have a direct access to the pixels (software_x11, ddraw, sdl, WinCE)

And we have the corresponding two cache systems :
   * Evas_Cache_Engine_Image for the first case
   * Evas_Cache_Image for the second case

But most engine didn't use them really. So instead of merging code we are duplicating effort for nothing and worse we are loosing speed for most engine.

We should also review the engine API to clean it up a bit.

= Edje =

It does recalc every thing each time a little stuff change, that's why we need edje_freeze/thaw. Their is no dependencies graph that would give us information about what need to be really recalc and during animation both start and end states are recalculated at each frame. This is a problem when you don't have FPU, you are loosing a lot of time doing the same math again and again.